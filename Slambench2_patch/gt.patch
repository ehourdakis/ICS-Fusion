diff --git a/framework/shared/include/SLAMBenchLibraryHelper.h b/framework/shared/include/SLAMBenchLibraryHelper.h
index cbe9f58..0d2478e 100644
--- a/framework/shared/include/SLAMBenchLibraryHelper.h
+++ b/framework/shared/include/SLAMBenchLibraryHelper.h
@@ -43,7 +43,7 @@ public:
 
 private:
     SLAMBenchLibraryHelper ();
-
+    slambench::outputs::BaseOutput *gt;
 
 public:
 
@@ -64,6 +64,17 @@ public:
 
 public :
 
+    inline void setGt(slambench::outputs::BaseOutput *gts)
+    {
+        gt=gts;
+    }
+    
+    inline slambench::outputs::BaseOutput* getGt() const
+    {
+        return gt;
+    }
+    
+    
     inline const std::string& get_identifier() const {return _identifier;};
 
     inline const std::string& get_library_name() const {return _library_name;};
diff --git a/framework/shared/src/SLAMBenchConfiguration.cpp b/framework/shared/src/SLAMBenchConfiguration.cpp
index f8b3d6a..51879c9 100644
--- a/framework/shared/src/SLAMBenchConfiguration.cpp
+++ b/framework/shared/src/SLAMBenchConfiguration.cpp
@@ -285,21 +285,22 @@ void SLAMBenchConfiguration::InitAlgorithms()
 	assert(this->initialised_);
 
 	for (auto lib : this->slam_libs) {
-
-		//lib->GetMetricManager().BeginInit();
-				bool init_worked =  lib->c_sb_init_slam_system(lib) ;
-		//lib->GetMetricManager().EndInit();
-
-		if (!init_worked) {
-			std::cerr << "Algorithm initialization failed." << std::endl;
-			exit(1);
-		}
-
-		auto trajectory = lib->GetOutputManager().GetMainOutput(slambench::values::VT_POSE);
-		if(trajectory == nullptr) {
-			std::cerr << "Algo does not provide a main pose output" << std::endl;
-			exit(1);
-		}
+            auto gt_trajectory = GetGroundTruth().GetMainOutput(slambench::values::VT_POSE);
+            lib->setGt(gt_trajectory);
+            //lib->GetMetricManager().BeginInit();
+            bool init_worked =  lib->c_sb_init_slam_system(lib) ;
+            //lib->GetMetricManager().EndInit();
+
+            if (!init_worked) {
+                    std::cerr << "Algorithm initialization failed." << std::endl;
+                    exit(1);
+            }
+
+            auto trajectory = lib->GetOutputManager().GetMainOutput(slambench::values::VT_POSE);
+            if(trajectory == nullptr) {
+                    std::cerr << "Algo does not provide a main pose output" << std::endl;
+                    exit(1);
+            }
 	}
 
 }
